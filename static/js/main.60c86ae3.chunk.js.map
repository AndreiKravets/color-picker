{"version":3,"sources":["ColorPicker.js","App.js","index.js"],"names":["ColorPicker","props","value","colors","onChange","useState","currentColor","setCurrentColor","prevCurrentColor","setPrevCurrentColor","rgbActive","setRgbActive","paletteActive","setPaletteActive","parseInt","substring","rgbRed","setRgbRed","rgbGreen","setRgbGreen","rgbBlue","setRgbBlue","convertHexToRgb","e","convertRgbToHex","color","correctColor","toString","length","changeRgbColor","red","green","blue","className","onClick","stopPropagation","style","backgroundColor","type","min","max","id","event","target","map","data","idx","name","App","state","changeTextColor","setState","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60c86ae3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {AiFillCaretDown} from \"react-icons/ai\";\r\n\r\n\r\nfunction ColorPicker(props) {\r\n    const {value, colors, onChange} = props;\r\n\r\n    const [currentColor, setCurrentColor] = useState(() => { return value })\r\n    const [prevCurrentColor, setPrevCurrentColor] = useState(() => { return value })\r\n    const [rgbActive, setRgbActive] = useState(false)\r\n    const [paletteActive, setPaletteActive] = useState(false)\r\n    const [rgbRed, setRgbRed] = useState(() => { return parseInt(currentColor.substring(1, 3), 16)})\r\n    const [rgbGreen, setRgbGreen] = useState(() => {return parseInt(currentColor.substring(3, 5), 16)})\r\n    const [rgbBlue, setRgbBlue] = useState(() => {return parseInt(value.substring(5, 7), 16)})\r\n\r\n    function convertHexToRgb(e) {\r\n        setRgbRed(parseInt(e.substring(1, 3), 16))\r\n        setRgbGreen(parseInt(e.substring(3, 5), 16))\r\n        setRgbBlue(parseInt(e.substring(5, 7), 16))\r\n    }\r\n\r\n    function convertRgbToHex(color) {\r\n        const correctColor = (+color).toString(16)\r\n        if (correctColor.length < 2)\r\n            return \"0\" + correctColor;\r\n        return correctColor;\r\n    }\r\n\r\n    function changeRgbColor(red, green, blue) {\r\n        setCurrentColor('#' + convertRgbToHex(red) + convertRgbToHex(green) + convertRgbToHex(blue))\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\" onClick={function () {\r\n            setCurrentColor(prevCurrentColor);\r\n            setPaletteActive(false);\r\n            setRgbActive(false);\r\n            convertHexToRgb(prevCurrentColor)\r\n        }}>\r\n            <div className=\"color_picker\" onClick={e => e.stopPropagation()}>\r\n                <div className=\"current_color\">{currentColor}</div>\r\n                <div className={rgbActive ? \"color_rgb active\" : \"color_rgb\"} onClick={() => {\r\n                    setRgbActive(true);\r\n                    setPaletteActive(false);\r\n                    setPrevCurrentColor(currentColor)\r\n                }}>\r\n                    <span style={{backgroundColor: currentColor}}></span>\r\n                    <div className=\"menu_rgb\" onClick={e => e.stopPropagation()}>\r\n                        <div> R <input type=\"range\" min=\"0\" max=\"255\" value={rgbRed} id=\"red\"\r\n                                       onChange={(event) => {\r\n                                           setRgbRed(event.target.value);\r\n                                           changeRgbColor(event.target.value, rgbGreen, rgbBlue)\r\n                                       }}/></div>\r\n                        <div> G <input type=\"range\" min=\"0\" max=\"255\" value={rgbGreen} id=\"green\"\r\n                                       onChange={(event) => {\r\n                                           setRgbGreen(event.target.value);\r\n                                           changeRgbColor(rgbRed, event.target.value, rgbBlue)\r\n                                       }}/></div>\r\n                        <div> B <input type=\"range\" min=\"0\" max=\"255\" value={rgbBlue} id=\"blue\"\r\n                                       onChange={(event) => {\r\n                                           setRgbBlue(event.target.value);\r\n                                           changeRgbColor(rgbRed, rgbGreen, event.target.value)\r\n                                       }}/></div>\r\n                        <div className=\"btn\">\r\n                            <button id=\"cancel\" onClick={function () {\r\n                                setCurrentColor(prevCurrentColor);\r\n                                setRgbActive(false);\r\n                                convertHexToRgb(prevCurrentColor)\r\n                            }}>Cancel\r\n                            </button>\r\n                            <button id=\"ok\" onClick={() => {\r\n                                setRgbActive(false);\r\n                                setPrevCurrentColor(currentColor)\r\n                                onChange(currentColor)\r\n                            }}>Ok\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={paletteActive ? \"color_palette active\" : \"color_palette\"} onClick={() => {\r\n                    setRgbActive(false);\r\n                    setPaletteActive(true)\r\n                }}>\r\n                    <AiFillCaretDown/>\r\n                    <div className=\"menu_palette\" onClick={e => e.stopPropagation()}>\r\n                        <ul>\r\n                            {colors.map((data, idx) => {\r\n                                return (\r\n                                    <li key={idx}\r\n                                        className={data.color == currentColor ? \"active\" : \"\"}\r\n                                        onClick={() => {\r\n                                            setCurrentColor(data.color);\r\n                                            setPaletteActive(false);\r\n                                            setPrevCurrentColor(data.color);\r\n                                            setRgbRed(parseInt(data.color.substring(1, 3), 16))\r\n                                            convertHexToRgb(data.color);\r\n                                            onChange(data.color)\r\n                                        }}>\r\n                                        {data.name}<span style={{backgroundColor: data.color}}></span></li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorPicker;\r\n","import React, {Component, Fragment} from 'react';\nimport ColorPicker from \"./ColorPicker\";\n\nconst colors = [\n    {name:'red', color:'#E0212D'},\n    {name:'yellow', color:'#E8B53F'},\n    {name:'green', color:'#14A458'},\n    {name:'blue', color:'#1EAFEA'}\n]\n\nclass App extends Component {\n\n    state = {\n        currentColor: \"#E8B53F\"\n    }\n\n    changeTextColor = (color) => {\n        this.setState( {\n                currentColor: color\n        })\n    }\n\n    render() {\n        return (\n                <Fragment>\n                    <div style={{color: this.state.currentColor}}>\n                        {/*<h1 style={{color: this.state.currentColor}}>Current color</h1>*/}\n                        <ColorPicker\n                            value = {this.state.currentColor}\n                            onChange = {this.changeTextColor}\n                            colors = {colors}\n                        />\n                    </div>\n\n                </Fragment>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}